[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "contextcache"
version = "0.1.0"
description = "Privacy-first memory engine for AI research"
readme = "README.md"
requires-python = ">=3.12"
license = { text = "Apache-2.0 OR PolyForm-Noncommercial-1.0.0" }
authors = [
    { name = "ContextCache Contributors" }
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.32.0",
    "pydantic>=2.10.0",
    "pydantic-settings>=2.6.0",
    "sqlalchemy>=2.0.36",
    "asyncpg>=0.30.0",
    "psycopg[binary]>=3.2.0",
    "alembic>=1.14.0",
    "redis>=5.2.0",
    "hiredis>=3.0.0",
    "arq>=0.26.0",
    "pynacl>=1.5.0",
    "argon2-cffi>=23.1.0",
    "blake3>=0.4.1",
    "httpx>=0.28.0",
    "python-multipart>=0.0.18",
    "python-jose[cryptography]>=3.3.0",
    "passlib>=1.7.4",
    "pyyaml>=6.0.2",
    "orjson>=3.10.0",
    "tenacity>=9.0.0",
    "structlog>=24.4.0",
    "great-expectations>=1.2.0",
    "numpy>=2.0.0",
    "scipy>=1.14.0",
    "networkx>=3.4.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "hypothesis>=6.122.0",
    "schemathesis>=3.40.0",
    "httpx>=0.28.0",
    "faker>=33.0.0",
    "factory-boy>=3.3.0",
    "ruff>=0.8.0",
    "mypy>=1.13.0",
    "black>=24.10.0",
    "isort>=5.13.0",
    "pre-commit>=4.0.0",
    "ipython>=8.30.0",
    "ipdb>=0.13.13",
]
test = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "hypothesis>=6.122.0",
    "schemathesis>=3.40.0",
    "httpx>=0.28.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/contextcache"
Documentation = "https://docs.contextcache.dev"
Repository = "https://github.com/yourusername/contextcache"
Issues = "https://github.com/yourusername/contextcache/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["cc_core*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--cov=cc_core",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests requiring external services",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "hypothesis: Property-based tests",
    "schemathesis: Contract tests",
    "smoke: Smoke tests for production",
]
filterwarnings = [
    "error",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["cc_core"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/venv/*",
]
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.ruff]
line-length = 100
target-version = "py312"
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "B904",  # use raise from
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG", "S101"]
"__init__.py" = ["F401"]

[tool.ruff.lint.isort]
known-first-party = ["cc_core"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true
strict_equality = true
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.black]
line-length = 100
target-version = ['py312']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | venv
  | __pycache__
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["cc_core"]