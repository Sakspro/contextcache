version: '3.8'

services:
  # PostgreSQL with pgvector
  postgres:
    image: pgvector/pgvector:pg16
    environment:
      POSTGRES_USER: contextcache
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      POSTGRES_DB: contextcache
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U contextcache"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-changeme}
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API
  api:
    build:
      context: ..
      dockerfile: infra/api.Dockerfile
    environment:
      DATABASE_URL: postgresql+asyncpg://contextcache:${DB_PASSWORD:-changeme}@postgres:5432/contextcache
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-changeme}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Worker
  worker:
    build:
      context: ..
      dockerfile: infra/worker.Dockerfile
    environment:
      DATABASE_URL: postgresql+asyncpg://contextcache:${DB_PASSWORD:-changeme}@postgres:5432/contextcache
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-changeme}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Frontend
  frontend:
    build:
      context: ..
      dockerfile: infra/frontend.Dockerfile
    environment:
      NEXT_PUBLIC_API_URL: ${API_URL:-http://localhost:8000}
    ports:
      - "3000:3000"
    depends_on:
      - api

volumes:
  postgres_data: